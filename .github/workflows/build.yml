name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Check environment
      shell: pwsh
      run: |
        Write-Host "Node version:"
        node --version
        Write-Host "NPM version:"
        npm --version

    - name: Install dependencies
      run: npm ci
      
    - name: Build Windows
      run: npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify build artifacts
      shell: pwsh
      run: |
        Write-Host "Checking release directory..."
        if (!(Test-Path "release")) {
          Write-Host "Error: Release directory not found!"
          exit 1
        }
        Get-ChildItem release -Recurse
        $exeFile = Get-ChildItem release -Filter *.exe | Select-Object -First 1
        if (!$exeFile) {
          Write-Host "Error: No .exe file found in release directory!"
          exit 1
        }
        Write-Host "Found installer: $($exeFile.Name)"
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: release/*.exe
        if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Check environment
      run: |
        echo "Node version:"
        node --version
        echo "NPM version:"
        npm --version

    - name: Install dependencies
      run: npm ci
      
    - name: Build macOS
      run: npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Verify build artifacts
      run: |
        echo "Checking release directory..."
        if [ ! -d "release" ]; then
          echo "Error: Release directory not found!"
          exit 1
        fi
        ls -la release
        if [ ! -f "release/"*.dmg ]; then
          echo "Error: No .dmg file found in release directory!"
          exit 1
        fi
        echo "Found DMG file(s):"
        ls -la release/*.dmg
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: release/*.dmg
        if-no-files-found: error

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: windows-artifacts
      id: download-windows
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: macos-artifacts
      id: download-macos

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-artifacts/*.exe
          macos-artifacts/*.dmg
        name: Release ${{ github.sha }}
        tag_name: v${{ github.run_number }}
        draft: false
        prerelease: false
        body: |
          Automated release from commit ${{ github.sha }}
          
          Build information:
          - Windows installer (.exe)
          - macOS disk image (.dmg)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
